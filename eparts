#!/bin/bash

INSTALL_DIR="$HOME/.eparts_cli"
EPARTS_ROOT="$HOME/Documents/eparts"
EPARTS_PROJECTS=(
  "eparts-api"
  "eparts-admin"
  "rma-api"
  "material-base"
  "integration-manager"
  "eparts-coverage"
  "eparts-ui-v2"
  "parts-request"
  "event-trace-api"
  "material-return"
  "ept-base"
  "claim-api"
  "history-trace"
  "eparts-shared"
)

function local_has() {
  type "$1" > /dev/null 2>&1
}

function custom_echo() {
  command printf %s\\n "$*" 2>/dev/null
}

# Function to handle the "help" command
function show_help() {
  custom_echo "Usage: eparts [command]"
  custom_echo "====================================="
  custom_echo "Commands:"
  custom_echo " - nvm:setup     Setup on .bashrc the NVM script to identify .npmrc automatically"
  custom_echo " - sync:install  Install dependencies for all projects in the EPARTS_ROOT directory"
  custom_echo " - uninstall     Uninstall the CLI"
  custom_echo " - help          Show this help message"
}

# Loop through the projects, check if the project exists in the EPARTS_ROOT directory, if exist enter the project and run npm install
function sync_install() {
  for project in "${EPARTS_PROJECTS[@]}"; do
    if [ -d "$EPARTS_ROOT/$project" ]; then
      custom_echo "Entering $project..."
      cd "$EPARTS_ROOT/$project" || exit
      custom_echo NODE VERSION: $(node -v)
      custom_echo "Running npm install..."

      if [ "$project" == "eparts-ui-v2" ]; then
        yarn install
      else
        npm install 
      fi

      if [ $? -eq 0 ]; then
        custom_echo "Project $project installed successfully"
      else
        custom_echo "Failed to install project $project"
      fi
    else
      custom_echo "Project $project does not exist in $EPARTS_ROOT"
    fi
  done
}

# Add the cdnvm method to .bashrc to automatically identify the .nvmrc file and use the correct node version
function nvm_setup() {
  custom_echo "Executing NVM setup..."

  local method_content=$(
    cat <<'EOF'
cdnvm() {
    command cd "$@" || return $?
    nvm_path="$(nvm_find_up .nvmrc | command tr -d '\\n')"

    if [[ ! $nvm_path = *[^[:space:]]* ]]; then

        declare default_version
        default_version="$(nvm version default)"

        if [ $default_version = 'N/A' ]; then
            nvm alias default node
            default_version=$(nvm version default)
        fi

        if [ "$(nvm current)" != "${default_version}" ]; then
            nvm use default
        fi
    elif [[ -s "${nvm_path}/.nvmrc" && -r "${nvm_path}/.nvmrc" ]]; then
        declare nvm_version
        nvm_version=$(<"${nvm_path}"/.nvmrc)

        declare locally_resolved_nvm_version
        locally_resolved_nvm_version=$(nvm ls --no-colors "${nvm_version}" | command tail -1 | command tr -d '\->*' | command tr -d '[:space:]')

        if [ "${locally_resolved_nvm_version}" = 'N/A' ]; then
            nvm install "${nvm_version}";
        elif [ "$(nvm current)" != "${locally_resolved_nvm_version}" ]; then
            nvm use "${nvm_version}";
        fi
    fi
}

alias cd='cdnvm'
cdnvm "$PWD" || exit
EOF
  )

  if ! grep -q "cdnvm()" "$HOME/.bashrc"; then
    echo -e "$method_content" >>"$HOME/.bashrc"
    source "$HOME/.bashrc"
    custom_echo "Method cdnvm added to .bashrc"
  else
    custom_echo "Method cdnvm already exists in .bashrc"
  fi
}

# Function to handle the "uninstall" command
function uninstall() {
  echo "Uninstalling CLI..."

  rm -rf "$INSTALL_DIR"
  sed -i '/export PATH="$HOME/.eparts_cli/bin:$PATH"/d' "$HOME/.bashrc"

  echo "CLI uninstalled successfully."
}

# Main script logic
if [[ $# -eq 0 ]]; then
  show_help
  exit 0
fi

case $1 in
uninstall)
  uninstall
  ;;
sync:install)
  sync_install
  ;;
nvm:setup)
  nvm_setup
  ;;
help)
  show_help
  ;;
*)
  custom_echo "Unknown command: $1"
  show_help
  ;;
esac
